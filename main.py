import asyncio
from dotenv import load_dotenv
import os
import discord
from discord.ext import commands, tasks
from datetime import datetime, timedelta
import pytz
import sqlite3


load_dotenv()

config = {
    'prefix': '!',
    'channel_id': 879019933957255208
}

intents = discord.Intents.default()
intents.message_content = True

bot = commands.Bot(command_prefix=config['prefix'], intents=intents)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π
message_id = None
start_message_idm = None
start_message_idt = None
completed_count = 0

@bot.event
async def on_ready():
    print(f'{bot.user.name} has connected to Discord!')
    send_message.start()  # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è


@tasks.loop(minutes=1)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
async def send_message():
    global message_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    moscow_tz = pytz.timezone('Europe/Moscow')
    moscow_time = datetime.now(moscow_tz)
    if moscow_time.hour == 17:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ 11:57 –ú–°–ö
        channel = bot.get_channel(config['channel_id'])
        if channel:
            embed = await create_initial_embed()
            view = MyView()
            message = f'<@&879192631060606998>'  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∏–Ω–≥ —Ä–æ–ª–∏ –≤ –Ω–∞—á–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            sent_message = await channel.send(message, embed=embed, view=view)
            global message_id
            message_id = sent_message.id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        else:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª —Å ID {config['channel_id']}")


async def create_initial_embed():
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–∫–∞—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    conn = sqlite3.connect('escdb.db')
    cursor = conn.cursor()

    cursor.execute('SELECT Rollback FROM Meet WHERE ROWID = (SELECT MAX(ROWID) FROM Meet)')
    meat_rollback_row = cursor.fetchone()
    meat_rollback_time = meat_rollback_row[0] if meat_rollback_row and meat_rollback_row[0] else '–ê–∫—Ç–∏–≤–µ–Ω'

    cursor.execute('SELECT Rollback FROM Trash WHERE ROWID = (SELECT MAX(ROWID) FROM Trash)')
    trash_rollback_row = cursor.fetchone()
    trash_rollback_time = trash_rollback_row[0] if trash_rollback_row and trash_rollback_row[0] else '–ê–∫—Ç–∏–≤–µ–Ω'

    cursor.execute('SELECT Rollback FROM Circuits WHERE ROWID = (SELECT MAX(ROWID) FROM Circuits)')
    circuits_rollback_row = cursor.fetchone()
    circuits_rollback_time = circuits_rollback_row[0] if circuits_rollback_row and circuits_rollback_row[0] else '–ê–∫—Ç–∏–≤–µ–Ω'

    cursor.execute('SELECT Rollback FROM BNB WHERE ROWID = (SELECT MAX(ROWID) FROM BNB)')
    bnb_rollback_row = cursor.fetchone()
    bnb_rollback_time = bnb_rollback_row[0] if bnb_rollback_row and bnb_rollback_row[0] else '–ê–∫—Ç–∏–≤–µ–Ω'

    conn.close()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    current_time = datetime.now(pytz.timezone('Europe/Moscow')).strftime('%Y-%d-%m %H:%M')

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–∞—Ç–∞
    def check_rollback(rollback_time):
        if rollback_time == '–ê–∫—Ç–∏–≤–µ–Ω':
            return rollback_time
        try:
            rollback_dt = datetime.strptime(rollback_time, '%Y-%d-%m %H:%M')
            rollback_dt = pytz.timezone('Europe/Moscow').localize(rollback_dt)
            if rollback_dt <= datetime.now(pytz.timezone('Europe/Moscow')):
                return '–î–æ—Å—Ç—É–ø–Ω–æ'
            else:
                return rollback_time
        except ValueError:
            return '–ê–∫—Ç–∏–≤–µ–Ω'

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–∫–∞—Ç–∞
    meat_status = check_rollback(meat_rollback_time)
    trash_status = check_rollback(trash_rollback_time)
    circuits_status = check_rollback(circuits_rollback_time)
    bnb_status = check_rollback(bnb_rollback_time)

    # –°–æ–∑–¥–∞–µ–º embed-—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–∞—Ç–∞
    embed = discord.Embed(
        description=f"# –ö–û–ù–¢–†–ê–ö–¢–´ \n## ü•© –ú—è—Å–æ - \nü•© –û—Ç–∫–∞—Ç–∏—Ç—Å—è - {meat_status}\n## ‚ôªÔ∏è –ú—É—Å–æ—Ä - \n‚ôªÔ∏è –û—Ç–∫–∞—Ç–∏—Ç—Å—è - {trash_status}\n## üíæ –°—Ö–µ–º—ã - {circuits_status} \n## ‚öíÔ∏è –õ–ù–° - {bnb_status}\n",
        color=0x50FFBC)
    return embed

class MyView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)  # Set timeout to None

    @discord.ui.button(label="–ú–Ø–°–û", style=discord.ButtonStyle.secondary)
    async def button1(self, interaction: discord.Interaction, button: discord.ui.Button):
        new_embed = discord.Embed(title="–ú–Ø–°–û", description="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç?", color=0x50FFBC)
        new_view = MeatView()
        await interaction.response.send_message(embed=new_embed, view=new_view, ephemeral=True)

    @discord.ui.button(label="–ú–£–°–û–†", style=discord.ButtonStyle.secondary)
    async def button2(self, interaction: discord.Interaction, button: discord.ui.Button):
        new_embed = discord.Embed(title="–ú–£–°–û–†", description="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç?", color=0x50FFBC)
        new_view = TrashView()
        await interaction.response.send_message(embed=new_embed, view=new_view, ephemeral=True)

    @discord.ui.button(label="–°–•–ï–ú–´", style=discord.ButtonStyle.secondary)
    async def button3(self, interaction: discord.Interaction, button: discord.ui.Button):
        new_embed = discord.Embed(title="–°–•–ï–ú–´", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä?", color=0x50FFBC)
        new_view = CircuitsView()
        await interaction.response.send_message(embed=new_embed, view=new_view, ephemeral=True)

    @discord.ui.button(label="–õ–ù–°", style=discord.ButtonStyle.secondary)
    async def button4(self, interaction: discord.Interaction, button: discord.ui.Button):
        new_embed = discord.Embed(title="–õ–ù–°", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç?", color=0x50FFBC)
        new_view = BNBView()
        await interaction.response.send_message(embed=new_embed, view=new_view, ephemeral=True)

class CircuitsView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)  # Set timeout to None

    @discord.ui.button(label="–ó–∞–ø—É—Å—Ç–∏—Ç—å", style=discord.ButtonStyle.secondary)
    async def Circuitsoption(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        channel = bot.get_channel(config['channel_id'])
        embed = discord.Embed(description="# üíæ –°—Ö–µ–º—ã \n–†–∞–±–æ—Ç–Ω–∏–∫–∏ - ", color=0x50FFBC)
        message = f'<@&879192631060606998>\n'  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∏–Ω–≥ —Ä–æ–ª–∏ –≤ –Ω–∞—á–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await channel.send(message, embed=embed, view=CircuitsView2())



class CircuitsView2(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        self.user_count = 0
        self.max_users = 2

    @discord.ui.button(label="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", style=discord.ButtonStyle.secondary)
    async def Circuitsoption(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        original_message = interaction.message
        user_mention = interaction.user.mention

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        conn = sqlite3.connect('escdb.db')
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute('SELECT Worker FROM Circuits WHERE ContractID = ?', (message_id,))
        existing_users = {row[0] for row in cursor.fetchall()}

        if user_mention in existing_users:
            await interaction.followup.send("–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç.", ephemeral=True)
            return

        if self.user_count < self.max_users:
            # Add the new user mention to the database
            cursor.execute("INSERT INTO Circuits (Worker, ContractID) VALUES (?, ?)", (user_mention, message_id))
            conn.commit()

            # Find the current "–†–∞–±–æ—Ç–Ω–∏–∫–∏ - " line and append the new user mention
            new_description = original_message.embeds[0].description + f" {user_mention}"
            new_embed = discord.Embed(title=original_message.embeds[0].title, description=new_description, color=0x50FFBC)

            # Increment the user count
            self.user_count += 1

            # Edit the message with the new embed
            await original_message.edit(embed=new_embed)

            # Check if the max user limit is reached
            if self.user_count >= self.max_users:
                # Create a new view with the "–ó–∞–ø—É—Å—Ç–∏—Ç—å" button
                new_view = StartCircuitsView(message_id=message_id)
                await original_message.edit(view=new_view)
        else:
            await interaction.followup.send("–í—Å–µ –º–µ—Å—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç—ã.", ephemeral=True)

class StartCircuitsView(discord.ui.View):
    def __init__(self, message_id):
        super().__init__(timeout=None)  # Set timeout to None
        self.message_id = message_id

    @discord.ui.button(label="–ó–∞–ø—É—Å—Ç–∏—Ç—å", style=discord.ButtonStyle.secondary)
    async def start_circuits(self, interaction: discord.Interaction, button: discord.ui.Button):
        user_mention = interaction.user.mention
        conn = sqlite3.connect('escdb.db')
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute('SELECT Worker FROM Circuits WHERE ContractID = ?', (self.message_id,))
        existing_users = {row[0] for row in cursor.fetchall()}

        current_time = datetime.now(pytz.timezone('Europe/Moscow')).strftime('%Y-%d-%m %H:%M')
        end_time = (datetime.now(pytz.timezone('Europe/Moscow')) + timedelta(hours=4)).strftime('%Y-%d-%m %H:%M')

        if user_mention not in existing_users:
            await interaction.response.send_message("–í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –µ–≥–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å.", ephemeral=True)
            return

        # Update the database with the formatted start and end times
        cursor.execute('UPDATE Circuits SET Start = ?, End = ? WHERE ContractID = ?', (current_time, end_time, self.message_id))
        conn.commit()
        conn.close()

        # Delete the original message
        await interaction.message.delete()

        # Send the new message
        channel = bot.get_channel(config['channel_id'])
        workers_mention = " ".join(existing_users)
        new_message_content = f"–í—ã–ø–æ–ª–Ω—è—é—Ç: {workers_mention}"
        end_time = (datetime.now(pytz.timezone('Europe/Moscow')) + timedelta(hours=4)).strftime('%m-%d %H:%M')
        new_embed = discord.Embed(description=f"# üíæ –°—Ö–µ–º—ã \n## –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∑–∞–ø—É—â–µ–Ω\n## –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ: {end_time} ", color=0x50FFBC)
        new_view = EndCircuitsView(message_id=self.message_id)
        await channel.send(new_message_content, embed=new_embed, view=new_view)

class EndCircuitsView(discord.ui.View):
    def __init__(self, message_id: int):
        super().__init__(timeout=None)
        self.message_id = message_id
        self.completed_users = set()

    @discord.ui.button(label="–ó–∞–≤–µ—Ä—à–∏–ª", style=discord.ButtonStyle.secondary)
    async def end_circuits(self, interaction: discord.Interaction, button: discord.ui.Button):
        user_mention = interaction.user.mention
        conn = sqlite3.connect('escdb.db')
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute('SELECT Worker FROM Circuits WHERE ContractID = ?', (self.message_id,))
        existing_users = {row[0] for row in cursor.fetchall()}

        if user_mention not in existing_users:
            await interaction.response.send_message("–í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –µ–≥–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å.", ephemeral=True)
            return

        current_time = datetime.now(pytz.timezone('Europe/Moscow')).strftime('%Y-%d-%m %H:%M')

        # Update the end time for the user
        cursor.execute('UPDATE Circuits SET End = ? WHERE ContractID = ? AND Worker = ?', (current_time, self.message_id, user_mention))
        conn.commit()

        self.completed_users.add(user_mention)
        channel = bot.get_channel(config['channel_id'])

        if len(self.completed_users) == len(existing_users):
            # Set the rollback time when the last user completes the contract
            rollback_time = (datetime.now(pytz.timezone('Europe/Moscow')) + timedelta(hours=20)).strftime('%Y-%d-%m %H:%M')
            cursor.execute('UPDATE Circuits SET Rollback = ? WHERE ContractID = ?', (rollback_time, self.message_id))
            conn.commit()

            original_message = await channel.fetch_message(self.message_id)  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID
            original_embed = original_message.embeds[0]
            original_description_lines = original_embed.description.split('\n')

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å "## üíæ –°—Ö–µ–º—ã -"
            for i, line in enumerate(original_description_lines):
                if line.startswith("## üíæ –°—Ö–µ–º—ã -"):
                    original_description_lines[i] = f"{line.split(' - ')[0]} - –ö–æ–Ω—Ç—Ä–∞–∫—Ç –æ—Ç–∫–∞—Ç–∏—Ç—Å—è - {rollback_time}"
                    break

            # –°–æ–±–∏—Ä–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            original_embed.description = '\n'.join(original_description_lines)
            await original_message.edit(embed=original_embed)

            # Increment the Circuits count in the Stat table
            current_month = datetime.now().strftime('%Y-%m')
            for user in existing_users:
                cursor.execute('SELECT –°ircuits FROM Stat WHERE Worker = ? AND Month = ?', (user, current_month))
                circuits_row = cursor.fetchone()

                current_value = (circuits_row[0] if circuits_row and circuits_row[0] is not None else 0) + 1

                if circuits_row:
                    cursor.execute('UPDATE Stat SET –°ircuits = ? WHERE Worker = ? AND Month = ?', (current_value, user, current_month))
                else:
                    cursor.execute('INSERT INTO Stat (Worker, Month, –°ircuits) VALUES (?, ?, ?)', (user, current_month, 1))
                conn.commit()

            # Update or insert into Contracts table
            cursor.execute('SELECT Count FROM –°ontracts WHERE Name = "Circuits" AND Month = ?', (current_month,))
            count_row = cursor.fetchone()
            if count_row:
                count = count_row[0] + 1
                cursor.execute('UPDATE –°ontracts SET Count = ? WHERE Name = "Circuits" AND Month = ?', (count, current_month))
            else:
                cursor.execute('INSERT INTO –°ontracts (Name, Month, Count) VALUES ("Circuits", ?, 1)', (current_month,))
            conn.commit()

            await interaction.message.delete()
            await interaction.response.send_message("–ö–æ–Ω—Ç—Ä–∞–∫—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!", ephemeral=True)
        else:
            await interaction.response.send_message("–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç. –û–∂–∏–¥–∞–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...", ephemeral=True)

        conn.close()


class MeatView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)  # Set timeout to None

    @discord.ui.button(label="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", style=discord.ButtonStyle.secondary)
    async def meat_option1(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        user_ping = interaction.user.mention

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        conn = sqlite3.connect('escdb.db')
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute('SELECT Worker FROM Meet WHERE ContractID = ?', (message_id,))
        existing_users = {row[0] for row in cursor.fetchall()}

        if len(existing_users) < 2:
            if user_ping not in existing_users:
                cursor.execute("INSERT INTO Meet (Worker, ContractID) VALUES (?, ?)", (user_ping, message_id))
                conn.commit()

                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                channel = bot.get_channel(config['channel_id'])
                if message_id:
                    message = await channel.fetch_message(message_id)  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID
                    updated_embed = message.embeds[0]
                    description_lines = updated_embed.description.split('\n')

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫—É —Å "ü•© –ú—è—Å–æ -"
                    for i, line in enumerate(description_lines):
                        if line.startswith("## ü•© –ú—è—Å–æ -"):
                            updated_description = f"{line.split(' - ')[0]} - {', '.join(sorted(existing_users.union({user_ping}))) or '–∑–¥–µ—Å—å'}"
                            description_lines[i] = updated_description
                            break

                    # –°–æ–±–∏—Ä–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                    updated_embed.description = '\n'.join(description_lines)
                    await message.edit(embed=updated_embed)
            else:
                await interaction.response.send_message("–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç.", ephemeral=True)
        else:
            await interaction.response.send_message("–í—Å–µ –º–µ—Å—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç—ã.", ephemeral=True)

    @discord.ui.button(label="–ó–∞–ø—É—Å—Ç–∏—Ç—å", style=discord.ButtonStyle.secondary)
    async def meat_option2(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        user_ping = interaction.user.mention

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        conn = sqlite3.connect('escdb.db')
        cursor = conn.cursor()
        cursor.execute('SELECT Worker FROM Meet WHERE ContractID = ?', (message_id,))
        registered_users = {row[0] for row in cursor.fetchall()}
        conn.close()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user_ping in registered_users:
            current_time = datetime.now(pytz.timezone('Europe/Moscow'))
            end_time = current_time + timedelta(hours=24)

            # Format end_time to string format
            end_time_str = end_time.strftime('%Y-%d-%m %H:%M')

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è
            channel = bot.get_channel(config['channel_id'])
            if message_id:
                message = await channel.fetch_message(message_id)  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID
                updated_embed = message.embeds[0]
                description_lines = updated_embed.description.split('\n')

                # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å "–û—Ç–∫–∞—Ç–∏—Ç—Å—è" –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å "ü•© –ú—è—Å–æ -" –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
                new_description_lines = []
                for line in description_lines:
                    if not line.startswith("ü•© –û—Ç–∫–∞—Ç–∏—Ç—Å—è -"):
                        new_description_lines.append(line)

                for i, line in enumerate(new_description_lines):
                    if line.startswith("## ü•© –ú—è—Å–æ -"):
                        parts = line.split(' - ')
                        if len(parts) > 1:
                            participants = parts[1].strip()
                            updated_description = f"{parts[0]} - {participants} | –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è - {end_time_str}"
                            new_description_lines[i] = updated_description
                        break

                # Update the embed description with the new lines
                updated_embed.description = '\n'.join(new_description_lines)
                await message.edit(embed=updated_embed)
                # –°–æ–±–∏—Ä–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                updated_embed.description = '\n'.join(new_description_lines)
                await message.edit(embed=updated_embed)

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect('escdb.db')
            cursor = conn.cursor()
            cursor.execute('UPDATE Meet SET Start = ?, End = ? WHERE ContractID = ?',
                           (current_time, end_time, message_id))
            conn.commit()
            conn.close()

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é embed-—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            embed2 = discord.Embed(description="# ü•© –ú–Ø–°–û \n## –ö–û–ù–¢–†–ê–ö–¢ –ó–ê–ü–£–©–ï–ù", color=0x50FFBC)
            view2 = ContractControlView()
            sent_message = await channel.send(embed=embed2, view=view2)
            global start_message_idm
            start_message_idm = sent_message.id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞


class TrashView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", style=discord.ButtonStyle.secondary)
    async def trash_option1(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        user_ping = interaction.user.mention

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        conn = sqlite3.connect('escdb.db')
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute('SELECT Worker FROM Trash WHERE ContractID = ?', (message_id,))
        existing_users = {row[0] for row in cursor.fetchall()}

        if len(existing_users) < 2:
            if user_ping not in existing_users:
                cursor.execute("INSERT INTO Trash (Worker, ContractID) VALUES (?, ?)", (user_ping, message_id))
                conn.commit()

                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                channel = bot.get_channel(config['channel_id'])
                if message_id:
                    message = await channel.fetch_message(message_id)  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID
                    updated_embed = message.embeds[0]
                    description_lines = updated_embed.description.split('\n')

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫—É —Å "‚ôªÔ∏è –ú—É—Å–æ—Ä -"
                    for i, line in enumerate(description_lines):
                        if line.startswith("## ‚ôªÔ∏è –ú—É—Å–æ—Ä -"):
                            updated_description = f"{line.split(' - ')[0]} - {', '.join(sorted(existing_users.union({user_ping}))) or '–∑–¥–µ—Å—å'}"
                            description_lines[i] = updated_description
                            break

                    # –°–æ–±–∏—Ä–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                    updated_embed.description = '\n'.join(description_lines)
                    await message.edit(embed=updated_embed)
            else:
                await interaction.response.send_message("–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç.", ephemeral=True)
        else:
            await interaction.response.send_message("–í—Å–µ –º–µ—Å—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç—ã.", ephemeral=True)

    @discord.ui.button(label="–ó–∞–ø—É—Å—Ç–∏—Ç—å", style=discord.ButtonStyle.secondary)
    async def trash_option2(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        user_ping = interaction.user.mention

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        conn = sqlite3.connect('escdb.db')
        cursor = conn.cursor()
        cursor.execute('SELECT Worker FROM Trash WHERE ContractID = ?', (message_id,))
        registered_users = {row[0] for row in cursor.fetchall()}
        conn.close()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user_ping in registered_users:
            current_time = datetime.now(pytz.timezone('Europe/Moscow')).strftime('%Y-%d-%m %H:%M')
            end_time = current_time

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è
            channel = bot.get_channel(config['channel_id'])
            if message_id:
                message = await channel.fetch_message(message_id)  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID
                updated_embed = message.embeds[0]
                description_lines = updated_embed.description.split('\n')

                # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å "–û—Ç–∫–∞—Ç–∏—Ç—Å—è" –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å "‚ôªÔ∏è –ú—É—Å–æ—Ä -" –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
                new_description_lines = []
                for line in description_lines:
                    if not line.startswith("‚ôªÔ∏è –û—Ç–∫–∞—Ç–∏—Ç—Å—è -"):
                        new_description_lines.append(line)

                for i, line in enumerate(new_description_lines):
                    if line.startswith("## ‚ôªÔ∏è –ú—É—Å–æ—Ä -"):
                        parts = line.split(' - ')
                        if len(parts) > 1:
                            participants = parts[1].strip()
                            updated_description = f"{parts[0]} - {participants} | –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è - {end_time}"
                            new_description_lines[i] = updated_description
                        break

                # –°–æ–±–∏—Ä–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                updated_embed.description = '\n'.join(new_description_lines)
                await message.edit(embed=updated_embed)

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect('escdb.db')
            cursor = conn.cursor()
            cursor.execute('UPDATE Trash SET Start = ?, End = ? WHERE ContractID = ?',
                           (current_time, end_time, message_id))
            conn.commit()
            conn.close()

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é embed-—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            embed2 = discord.Embed(description="# ‚ôªÔ∏è –ú–£–°–û–† \n## –ö–û–ù–¢–†–ê–ö–¢ –ó–ê–ü–£–©–ï–ù", color=0x50FFBC)
            view2 = View2()
            sent_message = await channel.send(embed=embed2, view=view2)
            global start_message_idt
            start_message_idt = sent_message.id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞


class SOSView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="–í–∑—è—Ç—å", style=discord.ButtonStyle.secondary)
    async def take_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        user_ping = interaction.user.mention

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        conn = sqlite3.connect('escdb.db')
        cursor = conn.cursor()

        cursor.execute("INSERT INTO Meet (Worker, ContractID) VALUES (?, ?)", (user_ping, message_id))
        conn.commit()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "SOS"
        embed = interaction.message.embeds[0]
        description = embed.description
        embed.description = f"# ü•© –ú–Ø–°–û \n–û—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è(–∞—Å—å) –Ω–∞ –ø–æ–º–æ—â—å: {user_ping}"
        await interaction.message.edit(embed=embed, view=None)

class SOSViewT(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="–í–∑—è—Ç—å", style=discord.ButtonStyle.secondary)
    async def take_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        user_ping = interaction.user.mention

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        conn = sqlite3.connect('escdb.db')
        cursor = conn.cursor()

        cursor.execute("INSERT INTO Trash (Worker, ContractID) VALUES (?, ?)", (user_ping, message_id))
        conn.commit()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "SOS"
        embed = interaction.message.embeds[0]
        description = embed.description
        embed.description = f"# ‚ôªÔ∏è –ú–£–°–û–† \n–û—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è(–∞—Å—å) –Ω–∞ –ø–æ–º–æ—â—å: {user_ping}"
        await interaction.message.edit(embed=embed, view=None)

class ContractControlView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="–ó–∞–≤–µ—Ä—à–∏—Ç—å", style=discord.ButtonStyle.secondary)
    async def end_contract(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        user_ping = interaction.user.mention

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        conn = sqlite3.connect('escdb.db')
        cursor = conn.cursor()
        cursor.execute('SELECT Worker FROM Meet WHERE ContractID = ?', (message_id,))
        registered_users = {row[0] for row in cursor.fetchall()}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user_ping in registered_users:
            end_time = datetime.now(pytz.timezone('Europe/Moscow'))

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            cursor.execute('UPDATE Meet SET End = ? WHERE ContractID = ?',
                           (end_time.strftime('%Y-%d-%m %H:%M'), message_id))
            conn.commit()

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–∫–∞—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            rollback_time = end_time + timedelta(hours=26)
            cursor.execute('UPDATE Meet SET Rollback = ? WHERE ContractID = ?',
                           (rollback_time.strftime('%Y-%d-%m %H:%M'), message_id))

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
            channel = bot.get_channel(config['channel_id'])
            if message_id:
                message = await channel.fetch_message(message_id)  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID
                updated_embed = message.embeds[0]
                description_lines = updated_embed.description.split('\n')

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å "ü•© –ú—è—Å–æ -" –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
                new_description_lines = []
                for line in description_lines:
                    if line.startswith("## ü•© –ú—è—Å–æ -"):
                        parts = line.split(' - ')
                        if len(parts) > 1:
                            updated_description = f"{parts[0]} - –ö–æ–Ω—Ç—Ä–∞–∫—Ç –æ—Ç–∫–∞—Ç–∏—Ç—Å—è - {rollback_time.strftime('%Y-%d-%m %H:%M')}"
                            new_description_lines.append(updated_description)
                    else:
                        new_description_lines.append(line)

                # –°–æ–±–∏—Ä–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                updated_embed.description = '\n'.join(new_description_lines)
                await message.edit(embed=updated_embed)

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            if start_message_idm:
                start_message = await channel.fetch_message(start_message_idm)
                await start_message.delete()
            current_month = datetime.now().strftime('%Y-%m')
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã Contracts
            cursor.execute('SELECT Count FROM –°ontracts WHERE Name = "Meet" AND Month = ?', (current_month,))
            count_row = cursor.fetchone()
            if count_row:
                count = count_row[0] + 1
                cursor.execute('UPDATE –°ontracts SET Count = ? WHERE Name = "Meet" AND Month = ?',
                               (count, current_month))
            else:
                cursor.execute('INSERT INTO –°ontracts (Name, Month, Count) VALUES ("Meet", ?, 1)', (current_month,))
            conn.commit()

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã Stat
            num_registered_users = len(registered_users)
            add_value = 1 / num_registered_users if num_registered_users > 0 else 0

            for user in registered_users:
                cursor.execute('SELECT Meet FROM Stat WHERE Worker = ? AND Month = ?', (user, current_month))
                meet_row = cursor.fetchone()
                if meet_row:
                    current_value = (int(meet_row[0]) if meet_row and meet_row[0] is not None else 0) + 1
                    cursor.execute('UPDATE Stat SET Meet = ? WHERE Worker = ? AND Month = ?',
                                   (current_value, user, current_month))
                else:
                    cursor.execute('INSERT INTO Stat (Worker, Month, Meet) VALUES (?, ?, ?)',
                                   (user, current_month, add_value))
                conn.commit()

            conn.close()

            await interaction.followup.send("–ö–æ–Ω—Ç—Ä–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.", ephemeral=True)
        else:
            await interaction.followup.send("–í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –µ–≥–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å.", ephemeral=True)

    @discord.ui.button(label="–ü–æ–º–æ—â—å", style=discord.ButtonStyle.secondary)
    async def help_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        user_ping = interaction.user.mention
        conn = sqlite3.connect('escdb.db')
        cursor = conn.cursor()
        cursor.execute('SELECT Worker FROM Meet WHERE ContractID = ?', (message_id,))
        registered_users = {row[0] for row in cursor.fetchall()}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user_ping in registered_users:
            channel = bot.get_channel(config['channel_id'])
            embed = discord.Embed(title="SOS", description="# ü•© –ú–Ø–°–û \n–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å!", color=0xFF0000)
            message = f'<@&879192631060606998>\n'  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∏–Ω–≥ —Ä–æ–ª–∏ –≤ –Ω–∞—á–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            sent_message = await channel.send(message, embed=embed, view=SOSView())

class View2(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="–ó–∞–≤–µ—Ä—à–∏—Ç—å", style=discord.ButtonStyle.secondary)
    async def end_contract(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        user_ping = interaction.user.mention

        conn = sqlite3.connect('escdb.db')
        cursor = conn.cursor()
        cursor.execute('SELECT Worker FROM Trash WHERE ContractID = ?', (message_id,))
        registered_users = {row[0] for row in cursor.fetchall()}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user_ping in registered_users:
            end_time = datetime.now(pytz.timezone('Europe/Moscow'))

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            cursor.execute('UPDATE Trash SET End = ? WHERE ContractID = ?',
                            (end_time.strftime('%Y-%d-%m %H:%M'), message_id))
            conn.commit()

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–∫–∞—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            rollback_time = end_time + timedelta(hours=26)
            cursor.execute('UPDATE Trash SET Rollback = ? WHERE ContractID = ?',
                            (rollback_time.strftime('%Y-%d-%m %H:%M'), message_id))

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
            channel = bot.get_channel(config['channel_id'])
            if message_id:
                message = await channel.fetch_message(message_id)  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID
                updated_embed = message.embeds[0]
                description_lines = updated_embed.description.split('\n')

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å "‚ôªÔ∏è –ú—É—Å–æ—Ä -" –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
                new_description_lines = []
                for line in description_lines:
                    if line.startswith("## ‚ôªÔ∏è –ú—É—Å–æ—Ä -"):
                        parts = line.split(' - ')
                        if len(parts) > 1:
                            updated_description = f"{parts[0]} - –ö–æ–Ω—Ç—Ä–∞–∫—Ç –æ—Ç–∫–∞—Ç–∏—Ç—Å—è - {rollback_time.strftime('%Y-%d-%m %H:%M')}"
                            new_description_lines.append(updated_description)
                    else:
                        new_description_lines.append(line)

                    # –°–æ–±–∏—Ä–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                updated_embed.description = '\n'.join(new_description_lines)
                await message.edit(embed=updated_embed)

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            if start_message_idt:
                start_message = await channel.fetch_message(start_message_idt)
                await start_message.delete()

            current_month = datetime.now().strftime('%Y-%m')
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã Contracts
            cursor.execute('SELECT Count FROM –°ontracts WHERE Name = "Trash" AND Month = ?', (current_month,))
            count_row = cursor.fetchone()
            if count_row:
                count = count_row[0] + 1
                cursor.execute('UPDATE –°ontracts SET Count = ? WHERE Name = "Trash" AND Month = ?',
                               (count, current_month))
            else:
                cursor.execute('INSERT INTO –°ontracts (Name, Month, Count) VALUES ("Trash", ?, 1)', (current_month,))
            conn.commit()

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã Stat
            num_registered_users = len(registered_users)
            add_value = 1 / num_registered_users if num_registered_users > 0 else 0

            for user in registered_users:
                cursor.execute('SELECT Trash FROM Stat WHERE Worker = ? AND Month = ?', (user, current_month))
                meet_row = cursor.fetchone()
                if meet_row:
                    current_value = (int(meet_row[0]) if meet_row and meet_row[0] is not None else 0) + 1
                    cursor.execute('UPDATE Stat SET Trash = ? WHERE Worker = ? AND Month = ?',
                                   (current_value, user, current_month))
                else:
                    cursor.execute('INSERT INTO Stat (Worker, Month, Trash) VALUES (?, ?, ?)',
                                   (user, current_month, add_value))
                conn.commit()

            conn.close()

            await interaction.followup.send("–ö–æ–Ω—Ç—Ä–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.", ephemeral=True)
        else:
            await interaction.followup.send("–í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –µ–≥–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å.", ephemeral=True)

    @discord.ui.button(label="–ü–æ–º–æ—â—å", style=discord.ButtonStyle.secondary)
    async def help_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        user_ping = interaction.user.mention
        conn = sqlite3.connect('escdb.db')
        cursor = conn.cursor()
        cursor.execute('SELECT Worker FROM Meet WHERE ContractID = ?', (message_id,))
        registered_users = {row[0] for row in cursor.fetchall()}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user_ping in registered_users:
            channel = bot.get_channel(config['channel_id'])
            embed = discord.Embed(title="SOS", description="# ‚ôªÔ∏è –ú–£–°–û–† \n–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å!", color=0xFF0000)
            message = f'<@&879192631060606998>\n'  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∏–Ω–≥ —Ä–æ–ª–∏ –≤ –Ω–∞—á–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            sent_message = await channel.send(message, embed=embed, view=SOSViewT())

class BNBView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        self.message_id = None

    @discord.ui.button(label="–ó–∞–ø—É—Å—Ç–∏—Ç—å", style=discord.ButtonStyle.secondary)
    async def start_contract(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        channel = bot.get_channel(config['channel_id'])
        message = f'<@&879192631060606998>\n'  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∏–Ω–≥ —Ä–æ–ª–∏ –≤ –Ω–∞—á–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        embed = discord.Embed(description="# ‚öíÔ∏è –õ–ù–° \n–í—ã–ø–æ–ª–Ω–µ–Ω–æ: 0/20", color=0x50FFBC)
        view = CompleteBNBView()

        sent_message = await channel.send(message, embed=embed, view=view)
        global completed_count
        global ed_message_id
        ed_message_id = sent_message.id

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        conn = sqlite3.connect('escdb.db')
        cursor = conn.cursor()

        current_time = datetime.now(pytz.timezone('Europe/Moscow')).strftime('%Y-%d-%m %H:%M')
        end_time = (datetime.now(pytz.timezone('Europe/Moscow')) + timedelta(hours=72)).strftime('%Y-%d-%m %H:%M')

        cursor.execute("INSERT INTO BNB (ContractID, Start, End) VALUES (?, ?, ?)",
                       (ed_message_id, current_time, end_time))
        conn.commit()
        conn.close()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
        asyncio.create_task(self.update_timer(sent_message))

    async def update_timer(self, message):
        while True:
            await asyncio.sleep(30)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
            channel = bot.get_channel(config['channel_id'])
            try:
                message = await channel.fetch_message(message.id)  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID
            except discord.errors.NotFound:
                print(f"Message with ID {message.id} not found. Stopping update task.")
                break

            updated_embed = message.embeds[0]

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
            conn = sqlite3.connect('escdb.db')
            cursor = conn.cursor()

            cursor.execute("SELECT Worker, End FROM BNB WHERE ContractID = ? AND Worker IS NOT NULL", (ed_message_id,))
            completed_users = cursor.fetchall()

            conn.close()

            # –û–±–Ω–æ–≤–ª—è–µ–º embed —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–ø–æ–ª–Ω–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏ —Ç–∞–π–º–µ—Ä–æ–º
            description_lines = updated_embed.description.split('\n')
            description_lines[0] = f"# ‚öíÔ∏è –õ–ù–° \n–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_count}/20"

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–ø–æ–ª–Ω–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
            description_lines = description_lines[:1]

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–ø–æ–ª–Ω–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
            for user, end_time in completed_users:
                end_time_dt = datetime.strptime(end_time, '%Y-%d-%m %H:%M')
                end_time_dt = pytz.timezone('Europe/Moscow').localize(end_time_dt)  # –î–µ–ª–∞–µ–º end_time_dt offset-aware
                remaining_time = end_time_dt - datetime.now(pytz.timezone('Europe/Moscow'))
                if remaining_time.total_seconds() <= 0:
                    new_line = f"{user} - –¥–æ—Å—Ç—É–ø–Ω–æ"
                else:
                    remaining_time_str = str(remaining_time).split('.')[0]
                    new_line = f"{user} - {remaining_time_str}"
                description_lines.append(new_line)

            updated_embed.description = '\n'.join(description_lines)
            await message.edit(embed=updated_embed)

class CompleteBNBView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="–í—ã–ø–æ–ª–Ω–∏–ª", style=discord.ButtonStyle.secondary)
    async def complete_contract(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        global completed_count
        completed_count += 1
        channel = bot.get_channel(config['channel_id'])
        try:
            message = await channel.fetch_message(ed_message_id)  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID
        except discord.errors.NotFound:
            return

        updated_embed = message.embeds[0]

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        conn = sqlite3.connect('escdb.db')
        cursor = conn.cursor()

        current_time = datetime.now(pytz.timezone('Europe/Moscow')).strftime('%Y-%d-%m %H:%M')
        end_time = (datetime.now(pytz.timezone('Europe/Moscow')) + timedelta(hours=24)).strftime('%Y-%d-%m %H:%M')
        current_month = datetime.now().strftime('%Y-%m')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        cursor.execute("SELECT 1 FROM BNB WHERE ContractID = ? AND Worker = ?",
                       (ed_message_id, interaction.user.mention))
        if cursor.fetchone() is None:
            cursor.execute("INSERT INTO BNB (ContractID, Worker, Start, End) VALUES (?, ?, ?, ?)",
                           (ed_message_id, interaction.user.mention, current_time, end_time))
        else:
            cursor.execute("UPDATE BNB SET Start = ?, End = ? WHERE ContractID = ? AND Worker = ?",
                           (current_time, end_time, ed_message_id, interaction.user.mention))
        conn.commit()

        if completed_count == 20:
            rollback_time = (datetime.now(pytz.timezone('Europe/Moscow')) + timedelta(hours=72)).strftime(
                '%Y-%d-%m %H:%M')
            cursor.execute("UPDATE BNB SET Rollback = ? WHERE ContractID = ?", (rollback_time, ed_message_id))
            conn.commit()

            # Fetch and update the original message with message_id
            original_message = await channel.fetch_message(message_id)  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID
            original_embed = original_message.embeds[0]
            original_description_lines = original_embed.description.split('\n')

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å "## ‚öíÔ∏è –õ–ù–° -"
            for i, line in enumerate(original_description_lines):
                if line.startswith("## ‚öíÔ∏è –õ–ù–° -"):
                    original_description_lines[i] = f"{line.split(' - ')[0]} - –ö–æ–Ω—Ç—Ä–∞–∫—Ç –æ—Ç–∫–∞—Ç–∏—Ç—Å—è - {rollback_time}"
                    break

            # –°–æ–±–∏—Ä–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            original_embed.description = '\n'.join(original_description_lines)
            await original_message.edit(embed=original_embed)

            # Update the statistics for each user
            cursor.execute("SELECT Worker FROM BNB WHERE ContractID = ? AND Worker IS NOT NULL", (ed_message_id,))
            existing_users = cursor.fetchall()
            for user in existing_users:
                user = user[0]  # Extract the actual username from the tuple
                cursor.execute('SELECT BNB FROM Stat WHERE Worker = ? AND Month = ?', (user, current_month))
                bnb_row = cursor.fetchone()
                if bnb_row:
                    current_value = (int(bnb_row[0]) if bnb_row and bnb_row[0] is not None else 0) + 1
                    cursor.execute('UPDATE Stat SET BNB = ? WHERE Worker = ? AND Month = ?',
                                   (current_value, user, current_month))
                else:
                    cursor.execute('INSERT INTO Stat (Worker, Month, BNB) VALUES (?, ?, ?)', (user, current_month, 1))
                conn.commit()

            # Update the BNB contract count
            cursor.execute('SELECT Count FROM –°ontracts WHERE Name = "BNB" AND Month = ?', (current_month,))
            count_row = cursor.fetchone()
            if count_row:
                count = count_row[0] + 1
                cursor.execute('UPDATE –°ontracts SET Count = ? WHERE Name = "BNB" AND Month = ?',
                               (count, current_month))
            else:
                cursor.execute('INSERT INTO –°ontracts (Name, Month, Count) VALUES ("BNB", ?, 1)', (current_month,))
            conn.commit()

            await interaction.message.delete()
            completed_count = 0

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        cursor.execute("SELECT Worker, End FROM BNB WHERE ContractID = ? AND Worker IS NOT NULL", (ed_message_id,))
        completed_users = cursor.fetchall()

        conn.close()

        # –û–±–Ω–æ–≤–ª—è–µ–º embed —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–ø–æ–ª–Ω–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        description_lines = updated_embed.description.split('\n')
        description_lines[0] = f"# ‚öíÔ∏è –õ–ù–° \n–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_count}/20"

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–ø–æ–ª–Ω–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        description_lines = description_lines[:1]

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–ø–æ–ª–Ω–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        for user, end_time in completed_users:
            end_time_dt = datetime.strptime(end_time, '%Y-%d-%m %H:%M')
            end_time_dt = pytz.timezone('Europe/Moscow').localize(end_time_dt)  # –î–µ–ª–∞–µ–º end_time_dt offset-aware
            remaining_time = end_time_dt - datetime.now(pytz.timezone('Europe/Moscow'))
            if remaining_time.total_seconds() <= 10:
                new_line = f"{user} - –¥–æ—Å—Ç—É–ø–Ω–æ"
            else:
                remaining_time_str = str(remaining_time).split('.')[0]
                new_line = f"{user} - {remaining_time_str}"
            description_lines.append(new_line)

        updated_embed.description = '\n'.join(description_lines)
        await message.edit(embed=updated_embed)

def get_stats(user=None):
    conn = sqlite3.connect('escdb.db')
    cursor = conn.cursor()

    current_month = datetime.now().strftime('%Y-%m')  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú

    if user:
        cursor.execute('SELECT * FROM Stat WHERE Worker = ? AND Month = ?', (user, current_month))
        result = cursor.fetchone()
        conn.close()
        return result
    else:
        cursor.execute('SELECT * FROM Stat WHERE Month = ?', (current_month,))
        result = cursor.fetchall()
        conn.close()
        return result

# Define the /stats command
@bot.command(name="—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", case_insensitive=True)
async def —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞(ctx, member: discord.Member = None):
    embed = discord.Embed(title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", color=0x50FFBC)

    if member:
        stats = get_stats(member.mention)
        if stats:
            embed.add_field(name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value=member.mention, inline=False)
            embed.add_field(name="–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã",
                            value=f"ü•© - {stats[1]} | ‚ôªÔ∏èÔ∏è - {stats[2]} | üíæ - {stats[3]} | ‚öíÔ∏è - {stats[4]}",
                            inline=False)
        else:
            embed.add_field(name="–û—à–∏–±–∫–∞", value=f"–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {member.mention} –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.", inline=False)
    else:
        stats = get_stats()
        if stats:
            for stat in stats:
                embed.add_field(name="\u200b",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–π —Å–∏–º–≤–æ–ª, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–ª—è
                                value=f"{stat[0]}: ü•© - {stat[1]} | ‚ôªÔ∏èÔ∏è - {stat[2]} | üíæ - {stat[3]} | ‚öíÔ∏è - {stat[4]}",
                                inline=False)
        else:
            embed.add_field(name="–û—à–∏–±–∫–∞", value="–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.", inline=False)

    await ctx.send(embed=embed)


@bot.command(name="—Å–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã", case_insensitive=True)
async def —Å–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã(ctx):
    conn = sqlite3.connect('escdb.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú
    current_month = datetime.now().strftime('%Y-%m')

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Contracts –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    cursor.execute('SELECT Name, Count FROM –°ontracts WHERE Month = ?', (current_month,))
    contracts = cursor.fetchall()
    conn.close()

    # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Å –∏—Ö –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø—Ä–∏–±—ã–ª–∏
    contract_names = {
        'Meet': {'display_name': 'ü•© –ú—è—Å–æ', 'profit_per_unit': 13000},
        'Trash': {'display_name': '‚ôªÔ∏è –ú—É—Å–æ—Ä', 'profit_per_unit': 13000},
        'BNB': {'display_name': '‚öíÔ∏è –õ–ù–°', 'profit_per_unit': 25000},
        'Circuits': {'display_name': 'üíæ –°—Ö–µ–º—ã', 'profit_per_unit': 30000}
    }

    month_names = {
        '01': '–Ø–Ω–≤–∞—Ä—å',
        '02': '–§–µ–≤—Ä–∞–ª—å',
        '03': '–ú–∞—Ä—Ç',
        '04': '–ê–ø—Ä–µ–ª—å',
        '05': '–ú–∞–π',
        '06': '–ò—é–Ω—å',
        '07': '–ò—é–ª—å',
        '08': '–ê–≤–≥—É—Å—Ç',
        '09': '–°–µ–Ω—Ç—è–±—Ä—å',
        '10': '–û–∫—Ç—è–±—Ä—å',
        '11': '–ù–æ—è–±—Ä—å',
        '12': '–î–µ–∫–∞–±—Ä—å'
    }

    display_month = month_names.get(current_month[-2:], current_month)
    embed = discord.Embed(description=f"# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –∑–∞ {display_month}", color=0x50FFBC)

    if contracts:
        for contract in contracts:
            name = contract[0]
            count = contract[1]

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É
            display_name = contract_names.get(name, {'display_name': name, 'profit_per_unit': 0})['display_name']
            profit_per_unit = contract_names.get(name, {'display_name': name, 'profit_per_unit': 0})['profit_per_unit']

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –ø—Ä–∏–±—ã–ª—å
            total_profit = count * profit_per_unit

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ –≤ embed
            embed.add_field(name=display_name, value=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count} | –ü—Ä–∏–±—ã–ª—å: {total_profit}$", inline=False)
    else:
        embed.add_field(name="–û—à–∏–±–∫–∞", value="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.", inline=False)

    await ctx.send(embed=embed)


class GatheringView(discord.ui.View):
    def __init__(self, count, embed):
        super().__init__()
        self.count = count
        self.embed = embed
        self.participants = []

    @discord.ui.button(label="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", style=discord.ButtonStyle.primary)
    async def –∑–∞–ø–∏—Å–∞—Ç—å—Å—è(self, interaction: discord.Interaction, button: discord.ui.Button):
        user = interaction.user

        if user.mention in self.participants:
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Å–ø–∏—Å–æ–∫
        self.participants.append(user.mention)

        # –û–±–Ω–æ–≤–ª—è–µ–º embed
        if len(self.participants) >= self.count:
            button.disabled = True  # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –Ω–∞–±—Ä–∞–Ω–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

        participant_list = "\n".join(self.participants)
        self.embed.set_field_at(0, name="–£—á–∞—Å—Ç–Ω–∏–∫–∏", value=participant_list, inline=False)

        await interaction.response.edit_message(embed=self.embed, view=self)


# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ View –≤ –∫–æ–º–∞–Ω–¥–µ
@bot.command(name="—Å–±–æ—Ä–≤–∑–ø")
async def —Å–±–æ—Ä–≤–∑–ø(ctx, count : int):
    if count <= 0:
        await ctx.send("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
        return

    embed = discord.Embed(
        description=f"# ‚öîÔ∏è –í–ó–ü \n## –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {count}",
        color=0x50FFBC
    )
    embed.add_field(name="–£—á–∞—Å—Ç–Ω–∏–∫–∏", value="–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.", inline=False)

    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ View –∏ –ø–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    view = GatheringView(count, embed)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º embed —Å View
    await ctx.send(content=f"<@&879192631060606998>", embed=embed, view=view)

TOKEN = os.getenv('DISCORD_TOKEN')

filename = "example.txt"

# –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å
content = "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä! –≠—Ç–æ –ø—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª."

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏
with open(filename, "w") as file:
    # –ó–∞–ø–∏—Å—å —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–∞–π–ª
    file.write(content)

bot.run(TOKEN)
